#!/usr/bin/env node
import fs from "fs-extra";
import {isEmpty, some, includes} from "lodash";
import parseArgs from "minimist";
import path from "path";
import chokidar from "chokidar";
import {transpile} from "./compiler";
import {forEachDirEntry} from "./fs-utils";

const argv = parseArgs(process.argv.slice(2), {
    string: ["input-dir", "output-dir"],
    boolean: ["help"],
    alias: {
        "input-dir": ["i"],
        "output-dir": ["o"],
        "watch": ["w"],
        "help": ["h"]
    },
});


const showHelp = async () =>
    console.log(await fs.readFile(path.join(__dirname, "../docs/help-info.txt"), {encoding: "utf-8"}));

interface FileTranspileOptions {
    outputDir: string;
    inputDir: string;
    skipLineAnnotations: boolean;
    skipAutoGeneratedComment: boolean;
}

const transpileFile = (options: FileTranspileOptions) => async (filePath: string) => {
    const ext = path.extname(filePath);
    if (!includes([".pug", ".jade"], ext)) return;
    const destFilePath = path.join(
        options.outputDir,
        path.relative(options.inputDir, filePath.replace(path.extname(filePath), ".tsx")),
    );
    const inputContent = (await fs.readFile(filePath)).toString();
    const transpileR = transpile(inputContent, {filePath, skipLineAnnotations: options.skipLineAnnotations});
    if (transpileR.errors) {
        for (const error of transpileR.errors) {
            let msg = `Encountered error in file: ${filePath}`;
            if (error.line) {
                msg += ` (line: ${error.line}`;
                if (error.column) {
                    msg += `, column: ${error.column}`;
                }
                msg += ")";
            }
            msg += ` [CODE: ${error.code}]`;
            if (error.reasons) {
                msg += ` ${error.reasons.join("\n")}`;
            }
            console.error(msg);
            if (error.maybeBug) {
                console.error(`This may be a bug in pug2tsx. We encourage you to create an issue for this.`);
            }
        }
    }
    if (some(transpileR.errors, {isFatal: true})) {
        console.error(
            `Failed to generate output for file ${filePath} because of one or more of the errors listed above`,
        );
    } else {
        await fs.ensureDir(path.dirname(destFilePath));
        const autoGeneratedComment = options.skipAutoGeneratedComment ? '' : `${AUTO_GENERATED_COMMENT}\n`
        const fileContent = `${autoGeneratedComment}${transpileR.result}`
        await fs.writeFile(destFilePath, fileContent);
    }
};

const run = async () => {
    try {
        if (argv.help) {
            await showHelp();
        } else if (argv["input-dir"]) {
            if (!isEmpty(argv._)) {
                console.error("When input-dir is specified, input files can not be passed");
                process.exit(1);
            }
            const outputDir = argv["output-dir"] || argv["input-dir"];
            const inputDir = argv["input-dir"];
            const skipLineAnnotations = argv["skip-line-annotations"];
            const skipAutoGeneratedComment = argv["skip-auto-generated-comment"];
            await forEachDirEntry(argv["input-dir"], transpileFile({
                outputDir,
                inputDir,
                skipLineAnnotations,
                skipAutoGeneratedComment
            }));
            if (argv["watch"]) {
                chokidar.watch(inputDir, {
                    persistent: true
                })

            }
        } else {
            await showHelp();
        }
        process.exit(0);
    } catch (e) {
        console.error(e);
        process.exit(1);
    }
};

const AUTO_GENERATED_COMMENT = `/**
* This file was auto-generated by pug2tsx: DO NOT EDIT
*/`

run();
